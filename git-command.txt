git config --global push.default current

Generating a new SSH key

ссылка на генератор:
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent


Открываем Git Bush и погнали:

1. Вставьте приведенный ниже текст, заменив адрес электронной почты,
используемый в примере, вашим адресом электронной почты на GitHub.

ssh-keygen -t ed25519 -C "aabor73@yandex.ru"

затем придумываем и вводим 2 раз ключевое слово, например: aleksey

Когда вводим его невидно, что ввел, но все равно вводи, а дальше...

2. Запускаем агента

ssh-agent

3. Переходим сюда на вкладку Add a new SSH key:
   ссылка: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

4. Вводим в терминал это чтобы сгенерировать ключик,
 который тоже не видно, но он есть в буфере обмена 

clip < ~/.ssh/id_ed25519.pub

5. Переходим в свой аккаунт GitHub и заходим в Setting, где

заходим во вкладку SSH and GPS keys, а там в большое поле SSH key

этот сгенерированный ключик и все.

6. Потом когда будем делать git clone нужно будет только вводить 
ключевое слово которое придумал в начале, например: aleksey.

// ===== Команды GitHub =====

1. Копируем последние сохраненные изменения репозитория с GitHub

    git pull --rebase

2. Проверяем статус

    git status

3. Чтобы вернуть удаленный файл или восстановить исходное состояние файла

    git restore имя файла

4. Сохранить изменения

    git add . // сохранить все
    git add имя файла/папки // сохранить файл или папку

5. Добавить коммит

    git commit -m 'комментарий'

6. Сохранить в удаленный репозиторий

    git push

7. История коммитов

    git log --oneline

8. Посмотреть коммит

    git show HASH
    
    // HASH - это где написано commit и много-много цифр
    цифры это т есть HASH

9. Посмотреть кто внес изменения

    git blame имя файла

10. Найти подстроку

    git grep h1 
    
    // h1 - это пример

11. Удалить добавленный файл/папку

    git clean -fd

12. Вернуть файл
 
    git revert HASH number

13. Команда сохраняет неподтвержденные изменения 
(индексированные и неиндексированные) в отдельном хранилище,
чтобы вы могли вернуться к ним позже. 
Затем происходит откат до исходной рабочей копии.

    git stash

Чтобы применить ранее отложенные изменения, воспользуйтесь командой

    git stash pop

14. Создать новую ветку и перейти в нее
    
    git checkout -b 'имя ветки'

    git switch -c 'имя ветки'

15. Посмотреть в какой сейчас ветке

    git branch // смотрим в какой ветке
    git add . // сохраняем
    git commit -m 'комментарий'
    git push // отправляем в удаленный репозиторий

16. Слияние веток

    переходим в нужную ветку и вводим
    git checkout имя ветки // например: dev
    git switch имя ветки // делает тоже самое

    сливаем в нее нужную ветку // например: sum => dev
    git merge имя ветки // например: sum

17. Удалить не нужную ветку

    git branch -d имя ветки // например: sum

18. Удалить не нужную ветку в удаленном репозитории

    git push -d origin имя ветки // например: sum



